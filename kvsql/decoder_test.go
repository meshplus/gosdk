package kvsql

import (
	"github.com/meshplus/gosdk/common/hexutil"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestDecode(t *testing.T) {
	answer := "0x000400000009746573745461626c6509746573745461626c650269640269643f00140000000803100009746573745461626c6509746573745461626c65046e616d65046e616d652e0080000000fd05100009746573745461626c6509746573745461626c6503657870036578703f00140000000800000009746573745461626c6509746573745461626c65056d6f6e6579056d6f6e65793f00100000000501000201000000080100000000000000010101000000000474657374010102000000000400000008010000000000000001010100000000089a9999999999f13f01010100000000"
	b, _ := hexutil.Decode(answer)
	rs := DecodeRecordSet(b)
	assert.Equal(t, 1, rs.rowNumber)
	result, err := rs.ToExecuteResult()
	assert.Nil(t, err)
	assert.Equal(t, "{\"column_count\":4,\"last_insert_id\":0,\"updated_count\":0,\"columns\":[\"id\",\"name\",\"exp\",\"money\"],\"row_number\":1,\"result\":[[1,\"test\",1,1.1]]}", result.String())
}

func TestDecode2(t *testing.T) {
	answer := "0x0000000000030000000300000000000000"
	b, _ := hexutil.Decode(answer)
	rs := DecodeRecordSet(b)
	assert.Equal(t, uint64(3), rs.lastInsertID)
}

func TestDecode3(t *testing.T) {
	answer := "0x00010000000000032d3131032d31313f0003000000088100000100000008f5ffffffffffffff01010100000000"
	b, _ := hexutil.Decode(answer)
	rs := DecodeRecordSet(b)
	result, err := rs.ToExecuteResult()
	assert.Nil(t, err)
	assert.Equal(t, "{\"column_count\":1,\"last_insert_id\":0,\"updated_count\":0,\"columns\":[\"-11\"],\"row_number\":1,\"result\":[[-11]]}", result.String())
}

func TestDecode4(t *testing.T) {
	answer := "0x0035000000053654333354053654333354066175746f4964066175746f49643f000b000000030502000536543333540536543333540574797065300574797065303f000b000000030300000536543333540536543333540574797065310574797065313f000a000000032000000536543333540536543333540574797065320574797065323f0014000000080000000536543333540536543333540574797065330574797065333f0014000000082800000536543333540536543333540574797065340574797065343f000c0000000408001f0536543333540536543333540574797065350574797065353f00ff0000000408001e0536543333540536543333540574797065360574797065363f00ff0000000408001e0536543333540536543333540574797065370574797065373f00160000000508001f0536543333540536543333540574797065380574797065383f00ff0000000500001e0536543333540536543333540574797065390574797065393f000b000000f600000005365433335405365433335406747970653130067479706531303f0020000000f600001e05365433335405365433335406747970653131067479706531313f000b000000f600000005365433335405365433335406747970653132067479706531323f0016000000f600001405365433335405365433335406747970653133067479706531333f00090000000900000005365433335405365433335406747970653134067479706531343f00080000000920000005365433335405365433335406747970653135067479706531353f00060000000200000005365433335405365433335406747970653136067479706531363f00040000000100000005365433335405365433335406747970653137067479706531373f00030000000120000005365433335405365433335406747970653138067479706531383f00050000000220000005365433335405365433335406747970653139067479706531393f000a0000000a80000005365433335405365433335406747970653230067479706532303f00130000000c80000005365433335405365433335406747970653231067479706532313f000a0000000b80000005365433335405365433335406747970653232067479706532323f00130000000780000005365433335405365433335406747970653233067479706532333f00040000000d60000005365433335405365433335406747970653234067479706532342e0000000000fe00000005365433335405365433335406747970653235067479706532352e0004000000fe00000005365433335405365433335406747970653236067479706532362e00fc030000fe00000005365433335405365433335406747970653237067479706532372e0000000000fd00000005365433335405365433335406747970653238067479706532382e0004000000fd00000005365433335405365433335406747970653239067479706532392e00fc030000fd00000005365433335405365433335406747970653330067479706533303f0000000000fe80000005365433335405365433335406747970653331067479706533313f0001000000fe80000005365433335405365433335406747970653332067479706533323f00ff000000fe80000005365433335405365433335406747970653333067479706533333f00ffff0000fc80000005365433335405365433335406747970653334067479706533343f00ff000000f980000005365433335405365433335406747970653335067479706533353f00ffffff00fa80000005365433335405365433335406747970653336067479706533362e0058020000fc00000005365433335405365433335406747970653337067479706533372e00fcffff03fa00000005365433335405365433335406747970653338067479706533383f0001000000fd80000005365433335405365433335406747970653339067479706533392e0000000000fe00000005365433335405365433335406747970653430067479706534302e0004000000fe00000005365433335405365433335406747970653431067479706534312e0010000000fe00000005365433335405365433335406747970653432067479706534322e0000000000fe00000005365433335405365433335406747970653433067479706534332e0004000000fe00000005365433335405365433335406747970653434067479706534342e00d4030000fe00000005365433335405365433335406747970653435067479706534353f00010000001020000005365433335405365433335406747970653436067479706534363f00400000001020000005365433335405365433335406747970653437067479706534373f00010000000100000005365433335405365433335406747970653438067479706534382e00fcffff03fa00000005365433335405365433335406747970653439067479706534392e00fcffff03fa00000005365433335405365433335406747970653530067479706535302e0004000000fe00000005365433335405365433335406747970653531067479706535312e0004000000fd00000001000000040907000001010100000000049e732b7b010101000000000415d0870701010100000000083aa1ffffffffffff010101000000000871575519bfcd04020101010000000004ba0f9f3e01010100000000044d6d6e3f0101010000000004d66cc3be0101010000000008a4a6c8fae881e83f0101010000000008aba76123a72be63f01010100000000052d313731340101020000000005000000212d302e3233363530303030303030303030303030303030303030303030303030300101020000000021000000062d3531343132010102000000000600000016302e383433303030303030303030303030303030303001010200000000160000000453d955000101010000000004c3d1180001010100000000024b2d0101010000000001660101010000000001170101010000000002282d01010100000000080e0000000054c91d0101010000000008000000287342f21d0101010000000008001ef1cdf239000001010100000000080100007524a8b01f0101010000000002770701010100000000000101020000000000000000013001010200000000010000006436383036323439363639373332383534303836393332373339363837343432383138343539323234343837313936333534323934343333343031373936333438363830353736303134373133383232343632323236353730393639323939303039353035010102000000006400000000010102000000000000000001640101020000000001000000fcff007a4f3979704e654c456e63684f69784944304b527637704134794e6638346e6649317076333252367a737a6246486a34527479447645574e644772557738715161576573774552307464454f50746b4d5a506b50673669564c585551445464486d71674e6736487351665639637134636772735436686e557063736463416e3041584f684f596c65636f34426a44464c7a62424e5276516c6c644632684b413355636c4a7350757738726c616363517872763663655851556c74427a414861773264456b4c4252597a53444e4d5a3033735534456b52666e6a48454e564e6730416f6c5a66355356753059486a426768563148355930654b4b7661735a473101010200000000ff000000000101020000000000000000012a0101020000000001000000fcff00ccd82dbce2a48abe65f391308024cff5bb3971c2aa2761f10c52476cc9e3235206b47528a36eb3767dc50852ed3ebfa5b17a0b47ed2a5a2b56ead26c5b96c805ca65e22eaabbc7af1560e71e57ca734ca952ed17f54285d4feecd11c0d5ba0e679c464cf1196373f427c41a8e9f5c157f78834f2e57c06aa5d5af0682504349f796518eca8f4f33dbf53a9dfa30e1f4232106825d8695817ae992d70fc0a30c8b4f9d232701d948d6a9199acd8e5ce94b5aa50af5929555b91f124167fde826315ba922120d8d4f6c5d1fcbdb08708521f9f91a7e84366f08b90bccbb18186660fe49d5ca270dbe476b3f4c7a7418b51d37cf38c7c55e5c784257dde277a4f01010200000000ff00000064279e9d01d72ec83ad3ae46ce057466371ba263f62a726018347135ec8619bc835e5f215431902b181ff2e41c6a28115a1e01b50ed33faad7601416032c3d2911b00b25e051f1f3676b082aa98d618f251c5b984976c4a89f7ed84ad8ef0ff22cdf05f1c50101020000000064000000189bc7836679d2fb8bf55d01daa0c7b7791a01b2d9359ec8ea010102000000001800000064892df41245164975050a48fdc2a262b012f29e95763cb507bd5df48b339d1539a988202f99d31cfe072df1696a58529b7813d848a4edcf9133bdbe67b4449b0718b07839471e35a6a798f9f17d6db70aee9b989e88d19dc9e363fc5906c4abb7d1bae32a0101020000000064000000143635363636373638363937303731373237333734010102000000001400000014363836393730373137323733373437353736373701010200000000140000000116010102000000000100000000010002000000000000000001610101020000000001000000046132373501010200000000040000000001000200000000000000000001000200000000000000000c61302c61312c61322c613630010102000000000c00000001000101020000000001000000087fffffffffffffff01010200000000080000000150010101000000001437323733373437353736373737383739383038310101020000000014000000143635363636373638363937303731373237333734010102000000001400000001390101020000000001000000016b0101020000000001000000"
	b, _ := hexutil.Decode(answer)
	rs := DecodeRecordSet(b)
	rows := rs.GetRow(0)
	assert.Equal(t, "72737475767778798081", rows.GetString(49))

	assert.Panics(t, func() {
		rs.GetRow(1)
	})

	result, err := rs.ToExecuteResult()
	assert.Nil(t, err)
	assert.Equal(t, "{\"column_count\":53,\"last_insert_id\":0,\"updated_count\":0,\"columns\":[\"autoId\",\"type0\",\"type1\",\"type2\",\"type3\",\"type4\",\"type5\",\"type6\",\"type7\",\"type8\",\"type9\",\"type10\",\"type11\",\"type12\",\"type13\",\"type14\",\"type15\",\"type16\",\"type17\",\"type18\",\"type19\",\"type20\",\"type21\",\"type22\",\"type23\",\"type24\",\"type25\",\"type26\",\"type27\",\"type28\",\"type29\",\"type30\",\"type31\",\"type32\",\"type33\",\"type34\",\"type35\",\"type36\",\"type37\",\"type38\",\"type39\",\"type40\",\"type41\",\"type42\",\"type43\",\"type44\",\"type45\",\"type46\",\"type47\",\"type48\",\"type49\",\"type50\",\"type51\"],\"row_number\":1,\"result\":[[1801,2066445214,126341141,-24262,145467308630169457,0.31066686,0.9313553,-0.38168973,0.7658581636544182,0.6928287211460334,\"-1714\",\"-0.236500000000000000000000000000\",\"-51412\",\"0.84300000000000000000\",5626195,1626563,11595,102,23,11560,\"1906-05-10\",\"1916-09-01 07:12:40\",\"17:41:55\",\"2028-02-20 02:17:53\",1911,\"\",\"0\",\"6806249669732854086932739687442818459224487196354294433401796348680576014713822462226570969299009505\",\"\",\"d\",\"zO9ypNeLEnchOixID0KRv7pA4yNf84nfI1pv32R6zszbFHj4RtyDvEWNdGrUw8qQaWeswER0tdEOPtkMZPkPg6iVLXUQDTdHmqgNg6HsQfV9cq4cgrsT6hnUpcsdcAn0AXOhOYleco4BjDFLzbBNRvQlldF2hKA3UclJsPuw8rlaccQxrv6ceXQUltBzAHaw2dEkLBRYzSDNMZ03sU4EkRfnjHENVNg0AolZf5SVu0YHjBghV1H5Y0eKKvasZG1\",\"\",\"*\",\"\\ufffd\\ufffd-\\ufffd⤊\\ufffde\\ufffd\\ufffd0\\ufffd$\\ufffd\\ufffd\\ufffd9qª'a\\ufffd\\u000cRGl\\ufffd\\ufffd#R\\u0006\\ufffdu(\\ufffdn\\ufffdv}\\ufffd\\u0008R\\ufffd\\u003e\\ufffd\\ufffd\\ufffdz\\u000bG\\ufffd*Z+V\\ufffd\\ufffdl[\\ufffd\\ufffd\\u0005\\ufffde\\ufffd.\\ufffd\\ufffdǯ\\u0015`\\ufffd\\u001eW\\ufffdsL\\ufffdR\\ufffd\\u0017\\ufffdB\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\u001c\\r[\\ufffd\\ufffdy\\ufffdd\\ufffd\\u0011\\ufffd7?B|A\\ufffd\\ufffd\\ufffd\\ufffdW\\ufffd\\ufffd4\\ufffd\\ufffd|\\u0006\\ufffd]Z\\ufffdh%\\u00044\\ufffdye\\u0018\\ufffd\\ufffd\\ufffd\\ufffd=\\ufffdS\\ufffdߣ\\u000e\\u001fB2\\u0010h%\\ufffdiX\\u0017\\ufffd\\ufffd-p\\ufffd\\n0ȴ\\ufffd\\ufffd2p\\u001d\\ufffd\\ufffdj\\ufffd\\ufffd\\ufffd\\ufffd\\ufffdΔ\\ufffd\\ufffdP\\ufffdY)U[\\ufffd\\ufffd$\\u0016\u007Fނc\\u0015\\ufffd\\ufffd! \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\u0008R\\u001f\\ufffd\\ufffd\\ufffd\\ufffdCf\\ufffd\\ufffd\\ufffd\\ufffd˱\\ufffd\\ufffdf\\u000f\\ufffd\\ufffd\\\\\\ufffdp\\ufffd\\ufffdv\\ufffd\\ufffdǧA\\ufffdQ\\ufffd|\\ufffd\\ufffd|U\\ufffdǄ%}\\ufffd'zO\",\"'\\ufffd\\ufffd\\u0001\\ufffd.\\ufffd:ӮF\\ufffd\\u0005tf7\\u001b\\ufffdc\\ufffd*r`\\u00184q5\\ufffd\\ufffd\\u0019\\ufffd\\ufffd^_!T1\\ufffd+\\u0018\\u001f\\ufffd\\ufffd\\u001cj(\\u0011Z\\u001e\\u0001\\ufffd\\u000e\\ufffd?\\ufffd\\ufffd`\\u0014\\u0016\\u0003,=)\\u0011\\ufffd\\u000b%\\ufffdQ\\ufffd\\ufffdgk\\u0008*\\ufffd\\ufffda\\ufffd%\\u001c[\\ufffdIvĨ\\ufffd~\\ufffdJ\\ufffd\\ufffd\\u000f\\ufffd,\\ufffd\\u0005\\ufffd\\ufffd\",\"\\ufffdǃfy\\ufffd\\ufffd\\ufffd\\ufffd]\\u0001ڠǷy\\u001a\\u0001\\ufffd\\ufffd5\\ufffd\\ufffd\\ufffd\",\"\\ufffd-\\ufffd\\u0012E\\u0016Iu\\u0005\\nH\\ufffd¢b\\ufffd\\u0012\\ufffd\\ufffd\\ufffdv\\u003c\\ufffd\\u0007\\ufffd]\\ufffd\\ufffd3\\ufffd\\u00159\\ufffd\\ufffd /\\ufffd\\ufffd\\u001c\\ufffd\\u0007-\\ufffdijXR\\ufffdx\\u0013\\ufffdH\\ufffd\\ufffdϑ3\\ufffd\\ufffdg\\ufffdD\\ufffd\\u0007\\u0018\\ufffdx9G\\u001e5\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd}m\\ufffd\\n\uE6D8\\ufffd\\ufffdѝ\\ufffd\\ufffdc\\ufffdY\\u0006ī\\ufffdѺ\\ufffd*\",\"65666768697071727374\",\"68697071727374757677\",\"\\u0016\",\"\",\"a\",\"a275\",\"\",\"\",\"a0,a1,a2,a60\",\"\",\"\u007F\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\",80,\"72737475767778798081\",\"65666768697071727374\",\"9\",\"k\"]]}", result.String())
}

func TestSetEnumDecimal(t *testing.T) {
	answer := "0x00140000000d746573745461626c654e616d650d746573745461626c654e616d65066175746f4964066175746f49643f000b000000030502000d746573745461626c654e616d650d746573745461626c654e616d650574797065300574797065303f0004000000010300000d746573745461626c654e616d650d746573745461626c654e616d650574797065310574797065313f0003000000012000000d746573745461626c654e616d650d746573745461626c654e616d650574797065320574797065323f0006000000020800000d746573745461626c654e616d650d746573745461626c654e616d650574797065330574797065333f0005000000022800000d746573745461626c654e616d650d746573745461626c654e616d650574797065340574797065343f000b000000030800000d746573745461626c654e616d650d746573745461626c654e616d650574797065350574797065353f000a000000032800000d746573745461626c654e616d650d746573745461626c654e616d650574797065360574797065363f0014000000080800000d746573745461626c654e616d650d746573745461626c654e616d650574797065370574797065373f0014000000082000000d746573745461626c654e616d650d746573745461626c654e616d650574797065380574797065383f000c0000000400001f0d746573745461626c654e616d650d746573745461626c654e616d650574797065390574797065393f00160000000500001f0d746573745461626c654e616d650d746573745461626c654e616d6506747970653130067479706531303f0020000000f600001e0d746573745461626c654e616d650d746573745461626c654e616d6506747970653131067479706531312e00fc030000fd0000000d746573745461626c654e616d650d746573745461626c654e616d6506747970653132067479706531323f0040000000102000000d746573745461626c654e616d650d746573745461626c654e616d6506747970653133067479706531333f00130000000c8000000d746573745461626c654e616d650d746573745461626c654e616d6506747970653134067479706531343f0013000000078000000d746573745461626c654e616d650d746573745461626c654e616d6506747970653135067479706531353f000a0000000a8000000d746573745461626c654e616d650d746573745461626c654e616d6506747970653136067479706531363f000a0000000b8000000d746573745461626c654e616d650d746573745461626c654e616d6506747970653137067479706531372e0010000000fe0000000d746573745461626c654e616d650d746573745461626c654e616d6506747970653138067479706531382e00d4030000fe000000030000000c010000000200000003000000010701000000000380007f01070100000000030080ff010701000000000600800000ff7f010701000000000600000080ffff010701000000000c0000008000000000ffffff7f010701000000000c0000000000000000ffffffff010501000000001800000000000000800100000000000000ffffffffffffff7f010701000000001800000000000000000100000000000000ffffffffffffffff010701000000000c010000000000803feeff7f7f01070100000000180100000000000000000000000000f03fffffffffffffef7f01070100000000612d302e393939393939393939393939393939393939393939393939393939393939302e303030303030303030303030303030303030303030303030303030303030302e39393939393939393939393939393939393939393939393939393939393901070400000000210000004100000061000000fc00016a6d3751446761437a48656836743835776d57616b783759673438744d32484e3041736f4c715154556f695a746e6139636e38537152594937675661526a636e324f376c4f6b6647344f773043485173346258754a596d744933385673764b69645557475555306a4d5542704f6a6268664a4844694c48696b6c58756f676b616f30303537634b3158763244774f57456339583339336d3742717a656b364466373641594959566d414f356a784c75504945456542494161355078433934746c75784161516a3671716d32714232446b656c33626478336c4252454542497577735642764f716e687077756b39634b4767726b54393542545a5366506e4b6b5601050400000000ff000000ff00000000010000180000000000000001000000000000000100000000000000010107040000000008000000100000001800000018000000000042a00f0000000000420400000000000042e02e01070100000000180100000100426c1f010000873366881f010000873366d81f01070100000000180e0000000042ac0f0e000000008c8d1f0e00000000063f9c0107010000000018006a868ef644f5ff00b60c0d4a2700000036b455944e00000107010000000009613161313161393939010704000000000200000005000000090000000661326131613101070400000000020000000400000006000000"
	b, _ := hexutil.Decode(answer)
	rs := DecodeRecordSet(b)
	rows := rs.GetRow(0)
	assert.Equal(t, "-0.999999999999999999999999999999", rows.GetDecimal(11).String())
	assert.Equal(t, "a2", rows.GetSet(19).String())
	assert.Equal(t, "a1", rows.GetEnum(18).String())
}
